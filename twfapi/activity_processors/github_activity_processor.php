<?php

	// This file is generated by Composer
//	require_once '../vendor/autoload.php';
	require_once '../vendor/autoload.php';
	require_once __DIR__ . '/../activity_aggregator.php';

	date_default_timezone_set('UTC');


	function getTaskID($commit_message){
		$merging_id = '-1';
		if (strpos($commit_message, '/') !== false) {
			$task_id = explode("/", $commit_message);
			if(is_numeric($task_id[0])){
				return $task_id[0];
			}else{
				return $merging_id;
			}
		}else{
			return  $merging_id;
		}
	}

	function getBranches(){
		$client = new \Github\Client();
		$branches = $client->api('repo')->branches('TeamWorkFlo', 'teamworkflo');
		return $branches;
	}

	function getCommitsFromBranch($branch_name){
		$client = new \Github\Client();
		$commits = $client->api('repo')->commits()->all('TeamWorkFlo', 'teamworkflo', array('sha' => $branch_name));
		return $commits;
	}


	function getGithubActivity(){
		
		// HACK: Use last-grabbed data. Comment out to retrieve from github
//		$json = file_get_contents(__DIR__ . '/github/4-30-2238-github.json');
//		return json_decode($json, true);
		
		$branches = getBranches();
		$activities_array = array();

		foreach($branches as $branch){
			$committs = getCommitsFromBranch($branch['name']);

			foreach($committs as $commit){
				$commit = $commit['commit'];
				$message = $commit['message'];
				$author = $commit['author'];
				$task_id = getTaskID($message);

				if($task_id!='-1'){
					$activity_array = array();
					$name = $author['name'];
					if (preg_match('/aqib/', $name))
						$name = "Aqib Bhat";
					$activity_array['actor'] = $name; 
					$activity_array['timestamp'] = strtotime($author['date']); 
					$activity_array['taskid'] = $task_id;
					$activity_array['source'] = 'github';
					//$activity_array['message'] = $message;

					
					array_push($activities_array, $activity_array);
				}

			}

		}

		return $activities_array;

	}

	?>